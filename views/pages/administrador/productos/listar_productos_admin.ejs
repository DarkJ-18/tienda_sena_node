<%- include('../../../partials/head.ejs') %>
<%- include('../../../partials/header.ejs') %>

<main class="container-fluid py-4">
  <div class="row">
    <!-- Sidebar -->
    <div class="col-md-2">
      <div class="card">
        <div class="card-header bg-primary text-white">
          <h6 class="mb-0"><i class="bi bi-speedometer2"></i> Panel Admin</h6>
        </div>
        <div class="list-group list-group-flush">
          <a href="/admin/productos" class="list-group-item list-group-item-action active">
            <i class="bi bi-box"></i> Productos
          </a>
          <a href="/admin/usuarios" class="list-group-item list-group-item-action">
            <i class="bi bi-people"></i> Usuarios
          </a>
        </div>
      </div>
    </div>

    <!-- Contenido principal -->
    <div class="col-md-10">
      <div class="card">
        <div class="card-header d-flex justify-content-between align-items-center">
          <h4 class="mb-0"><i class="bi bi-box"></i> Gestión de Productos</h4>
          <a href="/agregar_producto" class="btn btn-success">
            <i class="bi bi-plus-circle"></i> Nuevo Producto
          </a>
        </div>
        <div class="card-body">
          <!-- Filtros -->
          <div class="row mb-3">
            <div class="col-md-4">
              <input type="text" class="form-control" id="searchInput" placeholder="Buscar por nombre o referencia...">
            </div>
            <div class="col-md-3">
              <select class="form-select" id="categoryFilter">
                <option value="">Todas las categorías</option>
                <option value="Moda">Moda</option>
                <option value="Tecnologia">Tecnología</option>
                <option value="Artesania">Artesanía</option>
                <option value="Accesorios">Accesorios</option>
                <option value="Servicios">Servicios</option>
                <option value="Otros">Otros</option>
              </select>
            </div>
            <div class="col-md-3">
              <select class="form-select" id="stockFilter">
                <option value="">Todo el stock</option>
                <option value="sin_stock">Sin stock</option>
                <option value="bajo_stock">Stock bajo (< 10)</option>
                <option value="con_stock">Con stock</option>
              </select>
            </div>
            <div class="col-md-2">
              <button class="btn btn-outline-secondary w-100" onclick="limpiarFiltros()">
                <i class="bi bi-arrow-clockwise"></i> Limpiar
              </button>
            </div>
          </div>

          <!-- Tabla de productos -->
          <div class="table-responsive">
            <table class="table table-striped table-hover">
              <thead class="table-dark">
                <tr>
                  <th>Imagen</th>
                  <th>Referencia</th>
                  <th>Nombre</th>
                  <th>Categoría</th>
                  <th>Precio</th>
                  <th>Stock</th>
                  <th>Estado</th>
                  <th>Acciones</th>
                </tr>
              </thead>
              <tbody id="productTableBody">
              </tbody>
            </table>
          </div>

          <!-- Spinner de carga -->
          <div class="text-center py-4 d-none" id="loadingSpinner">
            <div class="spinner-border text-primary" role="status">
              <span class="visually-hidden">Cargando...</span>
            </div>
          </div>

          <!-- Paginación -->
          <nav aria-label="Paginación de productos">
            <ul class="pagination justify-content-center" id="pagination">
            </ul>
          </nav>
        </div>
      </div>
    </div>
  </div>
</main>

<!-- Modal Ver Detalle -->
<div class="modal fade" id="detalleModal" tabindex="-1">
  <div class="modal-dialog modal-lg">
    <div class="modal-content">
      <div class="modal-header bg-info text-white">
        <h5 class="modal-title"><i class="bi bi-eye"></i> Detalle del Producto</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
      </div>
      <div class="modal-body">
        <div class="row">
          <div class="col-md-6">
            <div id="productImages">
              <!-- Imágenes del producto -->
            </div>
          </div>
          <div class="col-md-6">
            <table class="table table-borderless">
              <tr><td><strong>Referencia:</strong></td><td id="detalle_referencia"></td></tr>
              <tr><td><strong>Nombre:</strong></td><td id="detalle_nombre"></td></tr>
              <tr><td><strong>Descripción:</strong></td><td id="detalle_descripcion"></td></tr>
              <tr><td><strong>Categoría:</strong></td><td id="detalle_categoria"></td></tr>
              <tr><td><strong>Color:</strong></td><td id="detalle_color"></td></tr>
              <tr><td><strong>Stock:</strong></td><td id="detalle_stock"></td></tr>
              <tr><td><strong>Precio Original:</strong></td><td id="detalle_precio_original"></td></tr>
              <tr><td><strong>Descuento:</strong></td><td id="detalle_descuento"></td></tr>
              <tr><td><strong>Precio Final:</strong></td><td id="detalle_precio_final"></td></tr>
              <tr><td><strong>En Oferta:</strong></td><td id="detalle_en_oferta"></td></tr>
              <tr><td><strong>Fecha Creación:</strong></td><td id="detalle_fecha"></td></tr>
            </table>
          </div>
        </div>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cerrar</button>
      </div>
    </div>
  </div>
</div>

<!-- Modal Editar Producto -->
<div class="modal fade" id="editarModal" tabindex="-1">
  <div class="modal-dialog modal-lg">
    <div class="modal-content">
      <div class="modal-header bg-warning text-dark">
        <h5 class="modal-title"><i class="bi bi-pencil"></i> Editar Producto</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
      </div>
      <form id="editarForm">
        <div class="modal-body">
          <input type="hidden" id="edit_id" name="id">
          
          <div class="row">
            <div class="col-md-6">
              <div class="mb-3">
                <label class="form-label">Nombre *:</label>
                <input type="text" class="form-control" id="edit_nombre" name="nombre" required maxlength="100">
              </div>
            </div>
            <div class="col-md-6">
              <div class="mb-3">
                <label class="form-label">Referencia *:</label>
                <input type="text" class="form-control" id="edit_referencia" name="referencia" required>
              </div>
            </div>
          </div>

          <div class="mb-3">
            <label class="form-label">Descripción *:</label>
            <textarea class="form-control" id="edit_descripcion" name="descripcion" required maxlength="254" rows="3"></textarea>
          </div>

          <div class="row">
            <div class="col-md-4">
              <div class="mb-3">
                <label class="form-label">Categoría *:</label>
                <select class="form-select" id="edit_categoria" name="categoria" required>
                  <option value="">Seleccione categoría</option>
                  <option value="Moda">Moda</option>
                  <option value="Tecnologia">Tecnología</option>
                  <option value="Artesania">Artesanía</option>
                  <option value="Accesorios">Accesorios</option>
                  <option value="Servicios">Servicios</option>
                  <option value="Otros">Otros</option>
                </select>
              </div>
            </div>
            <div class="col-md-4">
              <div class="mb-3">
                <label class="form-label">Color:</label>
                <select class="form-select" id="edit_color" name="color">
                  <option value="Ninguno">Ninguno</option>
                  <option value="Gris">Gris</option>
                  <option value="Blanco">Blanco</option>
                  <option value="Negro">Negro</option>
                  <option value="Amarillo">Amarillo</option>
                  <option value="Azul">Azul</option>
                  <option value="Rojo">Rojo</option>
                </select>
              </div>
            </div>
            <div class="col-md-4">
              <div class="mb-3">
                <label class="form-label">Stock *:</label>
                <input type="number" class="form-control" id="edit_stock" name="stock" required min="0">
              </div>
            </div>
          </div>

          <div class="row">
            <div class="col-md-6">
              <div class="mb-3">
                <label class="form-label">Precio original *:</label>
                <div class="input-group">
                  <span class="input-group-text">$</span>
                  <input type="number" class="form-control" id="edit_precio_original" name="precio_original" required min="0" step="0.01">
                </div>
              </div>
            </div>
            <div class="col-md-6">
              <div class="mb-3">
                <label class="form-label">Descuento (%):</label>
                <input type="number" class="form-control" id="edit_descuento" name="descuento" min="0" max="100">
              </div>
            </div>
          </div>

          <div class="mb-3 form-check">
            <input type="checkbox" class="form-check-input" id="edit_en_oferta" name="en_oferta">
            <label class="form-check-label" for="edit_en_oferta">
              <i class="bi bi-tag"></i> Producto en oferta
            </label>
          </div>

          <div class="mb-3">
            <label class="form-label">Imágenes del producto:</label>
            <div id="editImageInputs">
              <!-- Las imágenes existentes se cargarán aquí -->
            </div>
            <button type="button" class="btn btn-outline-primary btn-sm mt-2" onclick="addEditImageInput()">
              <i class="bi bi-plus"></i> Agregar imagen
            </button>
            <small class="form-text text-muted d-block mt-1">
              Agrega URLs de imágenes válidas (http:// o https://)
            </small>
            
            <!-- Preview de imágenes -->
            <div id="imagePreview" class="mt-3" style="display: none;">
              <h6>Vista previa de imágenes:</h6>
              <div class="row" id="previewContainer">
                <!-- Las previsualizaciones aparecerán aquí -->
              </div>
            </div>
          </div>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
          <button type="submit" class="btn btn-warning">
            <i class="bi bi-save"></i> Guardar Cambios
          </button>
        </div>
      </form>
    </div>
  </div>
</div>

<!-- Modal Eliminar Producto -->
<div class="modal fade" id="eliminarModal" tabindex="-1">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header bg-danger text-white">
        <h5 class="modal-title"><i class="bi bi-trash"></i> Eliminar Producto</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
      </div>
      <div class="modal-body">
        <div class="text-center">
          <i class="bi bi-exclamation-triangle text-warning" style="font-size: 3rem;"></i>
          <h4 class="mt-3">¿Estás seguro?</h4>
          <p>Esta acción eliminará permanentemente el producto:</p>
          <p><strong id="eliminar_producto_nombre"></strong></p>
          <p class="text-muted">Esta acción no se puede deshacer.</p>
        </div>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
        <button type="button" class="btn btn-danger" id="confirmarEliminar">
          <i class="bi bi-trash"></i> Sí, eliminar
        </button>
      </div>
    </div>
  </div>
</div>

<script>
let currentPage = 1;
let totalPages = 1;
let productToDelete = null;

document.addEventListener('DOMContentLoaded', function() {
  cargarProductos();
  
  document.getElementById('searchInput').addEventListener('input', debounce(cargarProductos, 500));
  document.getElementById('categoryFilter').addEventListener('change', cargarProductos);
  document.getElementById('stockFilter').addEventListener('change', cargarProductos);
  
  document.getElementById('editarForm').addEventListener('submit', guardarEdicion);
  
  document.getElementById('confirmarEliminar').addEventListener('click', eliminarProducto);
});

async function cargarProductos(page = 1) {
  currentPage = page;
  const tbody = document.getElementById('productTableBody');
  const spinner = document.getElementById('loadingSpinner');
  
  // Mostrar spinner
  spinner.classList.remove('d-none');
  tbody.innerHTML = '';
  
  try {
    // Construir URL con filtros
    const params = new URLSearchParams({
      page: currentPage,
      limit: 10
    });
    
    const search = document.getElementById('searchInput').value;
    const category = document.getElementById('categoryFilter').value;
    const stockFilter = document.getElementById('stockFilter').value;
    
    if (search) params.append('q', search);
    if (category) params.append('categoria', category);
    if (stockFilter) params.append('stock', stockFilter);
    
    const url = `/api/productos?${params}`;
    
    const response = await fetch(url);
    const data = await response.json();
    
    if (data.success) {
      mostrarProductos(data.data);
      if (data.pagination) {
        totalPages = data.pagination.totalPages;
        actualizarPaginacion();
      }
    } else {
      mostrarMensaje('Error al cargar productos: ' + data.message, 'danger');
    }
  } catch (error) {
    console.error('Error al cargar productos:', error);
    tbody.innerHTML = '<tr><td colspan="8" class="text-center text-muted">Error al cargar productos</td></tr>';
    mostrarMensaje('Error de conexión al cargar productos', 'danger');
  }
  
  // Ocultar spinner
  spinner.classList.add('d-none');
}

function mostrarProductos(productos) {
  const tbody = document.getElementById('productTableBody');
  
  if (productos.length === 0) {
    tbody.innerHTML = '<tr><td colspan="8" class="text-center text-muted">No se encontraron productos</td></tr>';
    return;
  }
  
  tbody.innerHTML = productos.map(producto => {
    const imagenPrincipal = producto.imagenes && producto.imagenes.length > 0 
      ? producto.imagenes[0].url 
      : '/static/assets/img_principal.jpg';
    
    const estadoStock = producto.stock === 0 ? 'Sin stock' : 
                       producto.stock < 10 ? 'Stock bajo' : 'Disponible';
    
    const badgeClass = producto.stock === 0 ? 'bg-danger' : 
                      producto.stock < 10 ? 'bg-warning' : 'bg-success';
    
    const precioFinal = producto.precio_final || producto.precio_original;
    
    return `
      <tr>
        <td>
          <img src="${imagenPrincipal}" alt="${producto.nombre}" 
               style="width: 50px; height: 50px; object-fit: cover;" class="rounded">
        </td>
        <td><small class="text-muted">${producto.referencia}</small></td>
        <td>
          <strong>${producto.nombre}</strong>
          ${producto.en_oferta ? '<span class="badge bg-danger ms-1">OFERTA</span>' : ''}
        </td>
        <td><span class="badge bg-light text-dark">${producto.categoria}</span></td>
        <td>
          ${producto.en_oferta && producto.descuento > 0 ? 
            `<small class="text-muted text-decoration-line-through">$${producto.precio_original.toLocaleString()}</small><br>` : 
            ''}
          <strong class="text-success">$${precioFinal.toLocaleString()}</strong>
        </td>
        <td><strong>${producto.stock}</strong></td>
        <td><span class="badge ${badgeClass}">${estadoStock}</span></td>
        <td>
          <div class="btn-group" role="group">
            <button class="btn btn-info btn-sm" onclick="verDetalle('${producto._id}')" title="Ver detalle">
              <i class="bi bi-eye"></i>
            </button>
            <button class="btn btn-warning btn-sm" onclick="editarProducto('${producto._id}')" title="Editar">
              <i class="bi bi-pencil"></i>
            </button>
            <button class="btn btn-danger btn-sm" onclick="confirmarEliminacion('${producto._id}', '${producto.nombre}')" title="Eliminar">
              <i class="bi bi-trash"></i>
            </button>
          </div>
        </td>
      </tr>
    `;
  }).join('');
}

async function verDetalle(id) {
  try {
    const response = await fetch(`/api/productos/${id}`);
    const data = await response.json();
    
    if (data.success) {
      const producto = data.data;
      
      // Llenar los datos del modal
      document.getElementById('detalle_referencia').textContent = producto.referencia;
      document.getElementById('detalle_nombre').textContent = producto.nombre;
      document.getElementById('detalle_descripcion').textContent = producto.descripcion;
      document.getElementById('detalle_categoria').textContent = producto.categoria;
      document.getElementById('detalle_color').textContent = producto.color;
      document.getElementById('detalle_stock').textContent = producto.stock;
      document.getElementById('detalle_precio_original').textContent = `$${producto.precio_original.toLocaleString()}`;
      document.getElementById('detalle_descuento').textContent = `${producto.descuento}%`;
      document.getElementById('detalle_precio_final').textContent = `$${(producto.precio_final || producto.precio_original).toLocaleString()}`;
      document.getElementById('detalle_en_oferta').textContent = producto.en_oferta ? 'Sí' : 'No';
      document.getElementById('detalle_fecha').textContent = new Date(producto.createdAt || Date.now()).toLocaleDateString();
      
      // Mostrar imágenes
      const imageContainer = document.getElementById('productImages');
      if (producto.imagenes && producto.imagenes.length > 0) {
        imageContainer.innerHTML = `
          <div class="row">
            ${producto.imagenes.map((img, index) => `
              <div class="col-md-6 mb-3">
                <div class="card">
                  <img src="${img.url}" alt="${img.descripcion || producto.nombre}" 
                       class="card-img-top" style="height: 150px; object-fit: cover;"
                       onerror="this.src='/static/assets/img_principal.jpg'">
                  ${img.descripcion ? `<div class="card-body p-2"><small class="text-muted">${img.descripcion}</small></div>` : ''}
                </div>
              </div>
            `).join('')}
          </div>
        `;
      } else {
        imageContainer.innerHTML = `
          <div class="text-center">
            <img src="/static/assets/img_principal.jpg" alt="Sin imagen" 
                 class="img-fluid rounded" style="max-height: 200px;">
            <p class="text-muted mt-2">No hay imágenes disponibles</p>
          </div>
        `;
      }
      
      // Mostrar modal
      new bootstrap.Modal(document.getElementById('detalleModal')).show();
    }
  } catch (error) {
    console.error('Error al cargar detalle:', error);
    alert('Error al cargar el detalle del producto');
  }
}

async function editarProducto(id) {
  try {
    const response = await fetch(`/api/productos/${id}`);
    const data = await response.json();
    
    if (data.success) {
      const producto = data.data;
      
      // Llenar el formulario
      document.getElementById('edit_id').value = producto._id;
      document.getElementById('edit_nombre').value = producto.nombre;
      document.getElementById('edit_referencia').value = producto.referencia;
      document.getElementById('edit_descripcion').value = producto.descripcion;
      document.getElementById('edit_categoria').value = producto.categoria;
      document.getElementById('edit_color').value = producto.color;
      document.getElementById('edit_stock').value = producto.stock;
      document.getElementById('edit_precio_original').value = producto.precio_original;
      document.getElementById('edit_descuento').value = producto.descuento || 0;
      document.getElementById('edit_en_oferta').checked = producto.en_oferta;
      
      // Cargar imágenes existentes
      loadExistingImages(producto.imagenes);
      
      // Configurar event listeners para el formulario
      setupEditFormListeners();
      
      // Mostrar modal
      new bootstrap.Modal(document.getElementById('editarModal')).show();
    }
  } catch (error) {
    console.error('Error al cargar producto para editar:', error);
    mostrarMensaje('Error al cargar el producto', 'danger');
  }
}

async function guardarEdicion(event) {
  event.preventDefault();
  
  const formData = new FormData(event.target);
  const id = formData.get('id');
  
  // Calcular precio final
  const precio_original = parseFloat(formData.get('precio_original'));
  const descuento = parseFloat(formData.get('descuento')) || 0;
  const en_oferta = formData.has('en_oferta');
  
  let precio_final = precio_original;
  if (en_oferta && descuento > 0) {
    precio_final = precio_original - (precio_original * descuento / 100);
  }
  
  // Procesar imágenes
  const imagenes = [];
  const imageUrls = formData.getAll('imagenes[url]') || [];
  const imageDescs = formData.getAll('imagenes[descripcion]') || [];
  
  // Obtener todas las imágenes del formulario
  const imageInputs = document.querySelectorAll('#editImageInputs input[name*="[url]"]');
  imageInputs.forEach((input, index) => {
    const urlInput = input;
    const descInput = input.parentNode.querySelector('input[name*="[descripcion]"]');
    
    if (urlInput.value.trim()) {
      // Validar URL
      if (isValidUrl(urlInput.value.trim())) {
        imagenes.push({
          url: urlInput.value.trim(),
          descripcion: descInput ? descInput.value.trim() : ''
        });
      } else {
        mostrarMensaje(`URL de imagen inválida: ${urlInput.value}`, 'warning');
      }
    }
  });
  
  const datos = {
    nombre: formData.get('nombre'),
    referencia: formData.get('referencia'),
    descripcion: formData.get('descripcion'),
    categoria: formData.get('categoria'),
    color: formData.get('color'),
    stock: parseInt(formData.get('stock')),
    precio_original: precio_original,
    descuento: descuento,
    en_oferta: en_oferta,
    precio_final: precio_final,
    imagenes: imagenes
  };
  
  // Mostrar spinner en el botón
  const submitBtn = event.target.querySelector('button[type="submit"]');
  const originalText = submitBtn.innerHTML;
  submitBtn.innerHTML = '<span class="spinner-border spinner-border-sm me-2"></span>Guardando...';
  submitBtn.disabled = true;
  
  try {
    const response = await fetch(`/api/productos/${id}`, {
      method: 'PUT',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(datos)
    });
    
    const result = await response.json();
    
    if (result.success) {
      // Cerrar modal
      bootstrap.Modal.getInstance(document.getElementById('editarModal')).hide();
      
      // Recargar productos
      await cargarProductos(currentPage);
      
      // Mostrar mensaje de éxito
      mostrarMensaje('Producto actualizado exitosamente', 'success');
    } else {
      mostrarMensaje('Error: ' + result.message, 'danger');
    }
  } catch (error) {
    console.error('Error al guardar:', error);
    mostrarMensaje('Error al guardar los cambios', 'danger');
  } finally {
    // Restaurar botón
    submitBtn.innerHTML = originalText;
    submitBtn.disabled = false;
  }
}

function isValidUrl(string) {
  try {
    const url = new URL(string);
    return url.protocol === 'http:' || url.protocol === 'https:';
  } catch (_) {
    return false;
  }
}

function confirmarEliminacion(id, nombre) {
  productToDelete = id;
  document.getElementById('eliminar_producto_nombre').textContent = nombre;
  new bootstrap.Modal(document.getElementById('eliminarModal')).show();
}

async function eliminarProducto() {
  if (!productToDelete) return;
  
  // Mostrar spinner en el botón
  const confirmarBtn = document.getElementById('confirmarEliminar');
  const originalText = confirmarBtn.innerHTML;
  confirmarBtn.innerHTML = '<span class="spinner-border spinner-border-sm me-2"></span>Eliminando...';
  confirmarBtn.disabled = true;
  
  try {
    const response = await fetch(`/api/productos/${productToDelete}`, {
      method: 'DELETE'
    });
    
    const result = await response.json();
    
    if (result.success) {
      // Cerrar modal
      bootstrap.Modal.getInstance(document.getElementById('eliminarModal')).hide();
      
      // Recargar productos
      await cargarProductos(currentPage);
      
      // Mostrar mensaje de éxito
      mostrarMensaje('Producto eliminado exitosamente', 'success');
    } else {
      mostrarMensaje('Error: ' + result.message, 'danger');
    }
  } catch (error) {
    console.error('Error al eliminar:', error);
    mostrarMensaje('Error al eliminar el producto', 'danger');
  } finally {
    // Restaurar botón
    confirmarBtn.innerHTML = originalText;
    confirmarBtn.disabled = false;
    productToDelete = null;
  }
}

function limpiarFiltros() {
  document.getElementById('searchInput').value = '';
  document.getElementById('categoryFilter').value = '';
  document.getElementById('stockFilter').value = '';
  cargarProductos();
}

function actualizarPaginacion() {
  const pagination = document.getElementById('pagination');
  let paginationHTML = '';
  
  // Botón anterior
  if (currentPage > 1) {
    paginationHTML += `<li class="page-item"><a class="page-link" href="#" onclick="cargarProductos(${currentPage - 1})">Anterior</a></li>`;
  }
  
  // Números de página
  for (let i = Math.max(1, currentPage - 2); i <= Math.min(totalPages, currentPage + 2); i++) {
    paginationHTML += `<li class="page-item ${i === currentPage ? 'active' : ''}">
      <a class="page-link" href="#" onclick="cargarProductos(${i})">${i}</a></li>`;
  }
  
  // Botón siguiente
  if (currentPage < totalPages) {
    paginationHTML += `<li class="page-item"><a class="page-link" href="#" onclick="cargarProductos(${currentPage + 1})">Siguiente</a></li>`;
  }
  
  pagination.innerHTML = paginationHTML;
}

// Función debounce para búsqueda
function debounce(func, wait) {
  let timeout;
  return function executedFunction(...args) {
    const later = () => {
      clearTimeout(timeout);
      func(...args);
    };
    clearTimeout(timeout);
    timeout = setTimeout(later, wait);
  };
}

function mostrarMensaje(mensaje, tipo = 'info') {
  // Crear el elemento de alerta
  const alertDiv = document.createElement('div');
  alertDiv.className = `alert alert-${tipo} alert-dismissible fade show position-fixed`;
  alertDiv.style.cssText = 'top: 20px; right: 20px; z-index: 9999; min-width: 300px;';
  alertDiv.innerHTML = `
    ${mensaje}
    <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
  `;
  
  // Agregar al body
  document.body.appendChild(alertDiv);
  
  // Auto-cerrar después de 4 segundos
  setTimeout(() => {
    if (alertDiv.parentNode) {
      alertDiv.remove();
    }
  }, 4000);
}

function setupEditFormListeners() {
  const editForm = document.getElementById('editarForm');
  if (!editForm) return;
  
  const precioOriginal = editForm.querySelector('#edit_precio_original');
  const descuento = editForm.querySelector('#edit_descuento');
  const enOferta = editForm.querySelector('#edit_en_oferta');
  
  function calcularPrecioFinalEdit() {
    const precio = parseFloat(precioOriginal.value) || 0;
    const desc = parseFloat(descuento.value) || 0;
    const oferta = enOferta.checked;
    
    let precioFinal = precio;
    if (oferta && desc > 0) {
      precioFinal = precio - (precio * desc / 100);
    }
    
    // Mostrar precio final calculado
    let precioFinalElement = editForm.querySelector('#precio-final-edit-preview');
    if (!precioFinalElement) {
      precioFinalElement = document.createElement('small');
      precioFinalElement.id = 'precio-final-edit-preview';
      precioFinalElement.className = 'text-muted mt-2 d-block';
      descuento.parentNode.appendChild(precioFinalElement);
    }
    
    if (precio > 0) {
      const ahorro = precio - precioFinal;
      precioFinalElement.innerHTML = `
        <strong>Precio final: $${precioFinal.toLocaleString()}</strong>
        ${ahorro > 0 ? `<br><small class="text-success">Ahorro: $${ahorro.toLocaleString()}</small>` : ''}
      `;
    } else {
      precioFinalElement.textContent = '';
    }
  }
  
  if (precioOriginal) precioOriginal.addEventListener('input', calcularPrecioFinalEdit);
  if (descuento) descuento.addEventListener('input', calcularPrecioFinalEdit);
  if (enOferta) enOferta.addEventListener('change', calcularPrecioFinalEdit);
}

let editImageCount = 0;

function addEditImageInput() {
  const container = document.getElementById('editImageInputs');
  const newInput = document.createElement('div');
  newInput.className = 'input-group mb-2';
  newInput.id = `editImageGroup_${editImageCount}`;
  newInput.innerHTML = `
    <input type="text" class="form-control" name="imagenes[${editImageCount}][url]" 
           placeholder="URL de la imagen" data-index="${editImageCount}"
           onchange="updateImagePreview()">
    <input type="text" class="form-control" name="imagenes[${editImageCount}][descripcion]" 
           placeholder="Descripción de la imagen">
    <button type="button" class="btn btn-outline-danger" onclick="removeEditImageInput('editImageGroup_${editImageCount}')">
      <i class="bi bi-trash"></i>
    </button>
  `;
  container.appendChild(newInput);
  editImageCount++;
  updateImagePreview();
}

function removeEditImageInput(groupId) {
  const element = document.getElementById(groupId);
  if (element) {
    element.remove();
    updateImagePreview();
  }
}

function loadExistingImages(imagenes) {
  const container = document.getElementById('editImageInputs');
  container.innerHTML = ''; // Limpiar contenedor
  editImageCount = 0;
  
  if (imagenes && imagenes.length > 0) {
    imagenes.forEach((imagen, index) => {
      const imageInput = document.createElement('div');
      imageInput.className = 'input-group mb-2';
      imageInput.id = `editImageGroup_${editImageCount}`;
      imageInput.innerHTML = `
        <input type="text" class="form-control" name="imagenes[${editImageCount}][url]" 
               value="${imagen.url || ''}" placeholder="URL de la imagen" data-index="${editImageCount}"
               onchange="updateImagePreview()">
        <input type="text" class="form-control" name="imagenes[${editImageCount}][descripcion]" 
               value="${imagen.descripcion || ''}" placeholder="Descripción de la imagen">
        <button type="button" class="btn btn-outline-danger" onclick="removeEditImageInput('editImageGroup_${editImageCount}')">
          <i class="bi bi-trash"></i>
        </button>
      `;
      container.appendChild(imageInput);
      editImageCount++;
    });
  }
  
  // Si no hay imágenes, agregar al menos un input vacío
  if (editImageCount === 0) {
    addEditImageInput();
  }
  
  // Actualizar preview
  updateImagePreview();
}

function updateImagePreview() {
  const previewContainer = document.getElementById('previewContainer');
  const previewSection = document.getElementById('imagePreview');
  const urlInputs = document.querySelectorAll('#editImageInputs input[name*="[url]"]');
  
  previewContainer.innerHTML = '';
  let hasValidImages = false;
  
  urlInputs.forEach((input, index) => {
    const url = input.value.trim();
    if (url && isValidUrl(url)) {
      hasValidImages = true;
      const descInput = input.parentNode.querySelector('input[name*="[descripcion]"]');
      const description = descInput ? descInput.value.trim() : '';
      
      const previewDiv = document.createElement('div');
      previewDiv.className = 'col-md-4 mb-3';
      previewDiv.innerHTML = `
        <div class="card">
          <img src="${url}" alt="${description || 'Imagen'}" 
               class="card-img-top" style="height: 100px; object-fit: cover;"
               onerror="this.parentNode.innerHTML='<div class=\\'card-body text-center\\'>URL inválida</div>'">
          ${description ? `<div class="card-body p-2"><small class="text-muted">${description}</small></div>` : ''}
        </div>
      `;
      previewContainer.appendChild(previewDiv);
    }
  });
  
  previewSection.style.display = hasValidImages ? 'block' : 'none';
}
</script>

<%- include('../../../partials/footer.ejs') %>